version: 2.1

orbs:
  node: circleci/node@5.0.3
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1
  aws-cli: circleci/aws-cli@3.1.3

jobs:
  cfn-lint:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install cfn lint
          command: |
            pip install cfn-lint
      - run:
          name: Validate CloudFormation template
          command: |
            #return 1
            cfn-lint infras/ourinfras.yml

  deploy-cfn:
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Deploy Cloudformation Template with new Docker image
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
            --template-file infras/ourinfras.yml \
            --parameter-overrides $(jq -r '.[] | [.ParameterKey, .ParameterValue] | "\(.[0])=\(.[1])"' ./infras/parameters.json) \
            --stack-name << parameters.stack-name >> \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

  lint-frontend:
    docker:
      - image: node:13.8.0
    steps:
      - checkout
      - run:
          name: Check lint code
          command: |
            cd my-app
            npm install
            npm run test

  build-frontend:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/capstone-frontend.tar
      - run:
          name: Load Docker image layer cache
          command: |
            # set +o pipefail
            if [[ -f "/caches/app.tar" ]]; then
              docker load -i /caches/app.tar | true
            fi
      - run:
          name: Build front-end
          command: |
            cd my-app
            docker build -t thong19981110vn/capstone-frontend .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/capstone-frontend.tar thong19981110vn/capstone-frontend
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/capstone-frontend.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASS"
            docker push thong19981110vn/capstone-frontend:latest

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Install envsubst
          command: |
            curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
            chmod +x envsubst
            sudo mv envsubst /usr/local/bin
      - run:
          name: Replace variable
          command: |
            envsubst < k8s/front-end-deployment.yml > k8s/front-end-deployment.yml.temp && cp -f k8s/front-end-deployment.yml.temp k8s/front-end-deployment.yml
            envsubst < k8s/front-end-service.yml > k8s/front-end-service.yml.temp && cp -f k8s/front-end-service.yml.temp k8s/front-end-service.yml
            echo "##################################"
            cat k8s/front-end-deployment.yml
            echo "##################################"
            cat k8s/front-end-service.yml
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "k8s/front-end-deployment.yml"
          resource-name: deployment/capstone-frontend
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "k8s/front-end-service.yml"
          resource-name: deployment/capstone-frontend
      - kubernetes/update-container-image:
          get-rollout-status: true
          container-image-updates: "capstone-frontend=thong19981110vn/capstone-frontend:latest"
          resource-name: deployment/capstone-frontend
      - run:
          name: Restart image
          command: |
            kubectl get service > service.txt    
      - run:
          name: Restart image
          command: |
            kubectl rollout restart deployment/capstone-frontend

workflows:
  capstone:
    jobs:
      - cfn-lint
      - deploy-cfn:
          stack-name: Udacity-Capstone
          requires:
            - cfn-lint
      - lint-frontend
      - build-frontend:
          requires:
            - lint-frontend
      - deploy-frontend:
          cluster-name: "EKSClusterCapstone"
          requires:
            - build-frontend
            - deploy-cfn
